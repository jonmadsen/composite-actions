name: CI Gradle Build and Publish
on:
  workflow_call:
    inputs:
      javaVersion:
        type: string
        description: 'Version of java'
        required: false
        default: '17'
      javaDistribution:
        type: string
        description: 'Java distribution to use'
        required: false
        default: 'adopt'
    secrets:
      ARTIFACTORY_USERNAME:
        required: true
      ARTIFACTORY_PASSWORD:
        required: true
defaults:
  run:
    shell: bash
jobs:
  setup:
    outputs:
      version: ${{ steps.gradle_build_values.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Gradle Build Values
        id: gradle_build_values
        uses: jonmadsen/composite-actions/extractGradleBuildValues@master
        with:
          validateVersion: true

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      # TODO: Remove this debug step
      - name: Dump Version
        shell: bash
        run: echo ${{ needs.setup.outputs.version }}
      # TODO: Remove this debug step
      - name: Dump Bogus Secret
        shell: bash
        run: echo ${{ secrets.BOGUS_SECRET }}
      - name: Gradle Build
        # TODO:  This is no good, this means that if say we had a action package published of
        # version 1.0.5, that this would always refer to the actions of master, and master could
        # be at a later version say 2.0.0, so eessentially this use is not guaranteed to reference
        # an action in the same release that it is published in unless the published release being
        # used is always the latest.
        # Ideally we would just reference the local action, and when the release was packaged
        # it would always reference that, or we somehow tie the release version into this
        # reference like `jonmadsen/composite-actions/gradleEnv@<Version Variable>
        uses: jonmadsen/composite-actions/gradleBuild@master
        with:
          javaVersion: ${{ inputs.javaVersion }}
          javaDistribution: ${{ inputs.javaDistribution }}
          #TODO: Revert this
          artifactoryUsername: ${{ secrets.ARTIFACTORY_USERNAMEE }}
          artifactoryPassword: ${{ secrets.ARTIFACTORY_PASSWORD }}

  verifyArtifactNotExist:
    needs: [setup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Gradle Verify Artifact Does Not Exist
        # We always want to run this job even if we don't execute this step so that we can
        # simplify the conditional job logic for subsequent steps
        if: ${{ !endsWith(needs.setup.outputs.version, '-snapshot') }}
        uses: jonmadsen/composite-actions/gradleVerifyArtifactNotExist@master
        with:
          version: ${{ needs.setup.outputs.version }}
          artifactoryUsername: ${{ secrets.ARTIFACTORY_USERNAME }}
          artifactoryPassword: ${{ secrets.ARTIFACTORY_PASSWORD }}

  # Try separate job to publish, now it would be nice to use the build data from the build job.
  # We don't really need to separate this from the above build, but trying this.  Feeling like overkill so we could just roll the
  # publishing step into the build job with the 'if' conditional
  publish:
    needs: [setup, build, verifyArtifactNotExist]
    runs-on: ubuntu-latest
    if:
      ${{ (needs.setup.outputs.branch == 'master') || endsWith(needs.setup.outputs.version, '-snapshot') }}
    steps:
      - name: Gradle Publish
        uses: jonmadsen/composite-actions/gradleArtifactoryPublish@master
        with:
          # TODO: Maybe extract version in action rather than passing in
          version: ${{ needs.setup.outputs.version }}
          javaVersion: ${{ inputs.javaVersion }}
          javaDistribution: ${{ inputs.javaDistribution }}
          artifactoryUsername: ${{ secrets.ARTIFACTORY_USERNAME }}
          artifactoryPassword: ${{ secrets.ARTIFACTORY_PASSWORD }}
